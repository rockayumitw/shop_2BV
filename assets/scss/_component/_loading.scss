
$width:5px;
$n:60;
$t:3s;
$z:-20px;
$gap:0px;
$c1:#ED6F3F;
$c2:#FC9E20;

.loading-intro{
    width:100%;
    height:100%;
    background:white;
    @include fixed();
    @include z-index(loading-intro);
    // @include animation(bgAnimation,0.8s,false,false,infinite,alternate-reverse,backwards);
    .loading-area{
        max-width: 400px;
        height:50px;
        .loading-dna{
            @include absolute(top 50% left 50%);
            @include transform(translate(-50%,-140px));
            width: ($width+$gap*2)*$n;
            margin: 100px auto;
            perspective: 270px;
            // transform:rotateZ(90deg);
            transform-style: preserve-3d;
            letter-spacing: -5px;
            // &:after {
            //     letter-spacing: 5px;
            //     display: block;
            //     padding-top: 50px;
            //     color: #aaa;
            //     text-align: center;
            //     content: 'loading...';
            // }
            @include media-max(xs){
                @include transform(translate(-50%,-140px)scale(0.8));
            }
        }
    }
    .element {
        width: $width;
        height: $width;
        display: inline-block;
        animation: rotate $t linear infinite;
        transform: rotateX(-360deg) translateZ(0);
        transform-style: preserve-3d;
        margin-left: $gap;
        &:nth-of-type(2n) .dot:before {
        background: $c2;
        }
    .dot {
        width: inherit;
        height: inherit;
        transform: translateZ($z);
        transform-style: preserve-3d;
            &:before {
                content: '';
                width: inherit;
                height: inherit;
                display: block;
                background: $c1;
                border-radius: 50%;
                animation: rotate $t linear infinite reverse;//reverse
                transform: rotateX(-360deg) translateZ(0);
            }
        }  
    }
    transition:.3s;
    &.hidden{
        transition:.3s;
        opacity:0;
    }
}

@for $i from 1 through $n {
  $delay: $t / $n * $i * -2;
  .element:nth-of-type(#{$i}),
  .element:nth-of-type(#{$i}) .dot:before {
    animation-delay: $delay;
  }
  .element:nth-of-type(#{$i}):nth-of-type(odd) {
    animation-delay: $delay - ($t * .5);
  }
}

@include keyframes (bgAnimation){
    0%{
        background:#ED6F3F;
    }
    100%{
        background:#e66532;
    }
}

@keyframes rotate {
  to { transform: none; }
}
